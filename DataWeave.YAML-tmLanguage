# [PackageDev] target_format: plist, ext: tmLanguage
---
fileTypes: [dwl]
name: DataWeave
scopeName: source.dw
uuid: d508c059-a938-4779-b2bc-ff43a5098907
patterns:
- include: '#comments'
- include: '#imports'
- include: '#dw-directive'
- include: '#statements'

repository:
  classes:
    begin: (?=\s*(?:companion|class|object|interface))
    end: '}|(?=$)'
    patterns:
    - begin: \b(companion\s*)?(class|object|interface)\b
      beginCaptures:
        '1': {name: keyword.other.dw}
      end: (?=<|{|\(|:)
      patterns:
      - {match: \b(object)\b, name: keyword.other.dw}
      - {match: \w+, name: entity.name.type.class.dw}
    - begin: <
      end: '>'
      patterns:
      - {include: '#generics'}
    - begin: \(
      end: \)
      patterns:
      - {include: '#parameters'}
    - begin: (:)
      beginCaptures:
        '1': {name: keyword.operator.declaration.dw}
      end: (?={|$)
      patterns:
      - {match: \w+, name: entity.other.inherited-class.dw}
      - begin: \(
        end: \)
        patterns:
        - {include: '#expressions'}
    - begin: \{
      end: \}
      patterns:
      - {include: '#statements'}
  comments:
    patterns:
    - begin: /\*
      captures:
        '0': {name: punctuation.definition.comment.dw}
      end: \*/
      name: comment.block.dw
    - captures:
        '1': {name: comment.line.double-slash.dw}
        '2': {name: punctuation.definition.comment.dw}
      match: \s*((//).*$\n?)
  constants:
    patterns:
    - {match: \b(true|false|null)\b, name: constant.language.dw}
    - {match: '\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\b',
      name: constant.numeric.dw}
    # - {match: '\b([A-Z][A-Z0-9_]+)\b', name: constant.other.dw}
  expressions:
    patterns:
    - {include: '#paren-expression'}
    - {include: '#strings'}
    - {include: '#constants'}
    - {include: '#comments'}
    - include: '#match-statement'
    - include: '#keywords'
    - include: '#object-literal'

  paren-expression:
    begin: \(
    end: \)
    patterns:
    - {include: '#expressions'}

  functions:
    begin: (?=\s*(?:fun))
    end: '}|(?=$)'
    patterns:
    - begin: \b(fun)\b
      beginCaptures:
        '1': {name: keyword.other.dw}
      end: (?=\()
      patterns:
      - match: ([\.<\?>\w]+\.)?(\w+)
        captures:
          '2': {name: entity.name.function.dw}
      - begin: <
        end: '>'
        patterns:
        - {include: '#generics'}
    - begin: \(
      end: \)
      patterns:
      - {include: '#parameters'}
    - begin: (:)
      beginCaptures:
        '1': {name: keyword.operator.declaration.dw}
      end: (?==)
      patterns:
      - {include: '#types'}
    - begin: (=)
      beginCaptures:
        '1': {name: keyword.operator.assignment.dw}
      end: (?=$)
      patterns:
      - {include: '#expressions'}
  generics:
    patterns:
    - begin: (:)
      beginCaptures:
        '1': {name: keyword.operator.declaration.dw}
      end: (?=,|>)
      patterns:
      - {include: '#types'}
    - {match: "<:", name: keyword.operator.extends.dw}
    - {include: '#keywords'}
    - {match: \w+, name: storage.type.generic.dw}
  
  imports:
    patterns:
    - captures:
        '1': {name: keyword.other.dw}
        '2': {name: keyword.other.dw}
      match: ^\s*(import)\s+[^ $]+\s+(from)?
  keywords:
    patterns:
    - {match: \b(var|val|public|private|protected|abstract|final|enum|open|attribute|annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof)\b,
      name: storage.modifier.dw}
    - {match: \b(try|catch|finally|throw)\b, name: keyword.control.catch-exception.dw}
    - {match: \b(if|else|while|for|do|return|when|where|break|continue)\b, name: keyword.control.dw}
    - begin: (?<!\.|\$)\b(as|is)\s+
      beginCaptures:
        '1': { name: keyword.control.as.dw }
      end: (?=$|^|[;,:})\]])
      patterns:
      - include: '#types'
    - {match: (==|!=|===|!==|<=|>=|<|>), name: keyword.operator.comparison.dw}
    - {match: (=), name: keyword.operator.assignment.dw}
    - {match: '(:)', name: keyword.operator.declaration.dw}
    - {match: (\.), name: keyword.operator.dot.dw}
    - {match: (\-\-|\+\+), name: keyword.operator.increment-decrement.dw}
    - {match: (\-|\+|\*|\/|%), name: keyword.operator.arithmetic.dw}
    - {match: (\+=|\-=|\*=|\/=), name: keyword.operator.arithmetic.assign.dw}
    - {match: \b(not|and|or)\b, name: keyword.operator.logical.dw}
    - {match: (\.\.), name: keyword.operator.range.dw}
    - {match: (;), name: punctuation.terminator.dw}
  
  parameters:
    patterns:
    - begin: (:)
      beginCaptures:
        '1': {name: keyword.operator.declaration.dw}
      end: (?=,|\)|=)
      patterns:
      - {include: '#types'}
    - begin: (=)
      beginCaptures:
        '1': {name: keyword.operator.declaration.dw}
      end: (?=,|\))
      patterns:
      - {include: '#expressions'}
    - {include: '#keywords'}
    - {match: \w+, name: variable.parameter.function.dw}


  dw-directive:
    name: meta.directive.ns.dw
    begin: (?<!\.|\$)(%dw)\s+([0-9]\.[0-9])(?!\$|\.)
    beginCaptures:
      '1': { name: comment.dw }
      '2': { name: comment.dw }
    end: (?=\n)

  ns-directive:
    name: meta.directive.ns.dw
    begin: (?<!\.|\$)\b(ns)\s+([[:alpha:]][[:alnum:]]*)\s+([^\n]*)(?!\$|\.)
    beginCaptures:
      '1': { name: storage.type.ns.dw }
      '2': { name: entity.name.ns.dw }
      '3': { name: meta.definition.ns.dw string.url.dw }
    end: (?=\n)


  input-directive:
    name: meta.directive.ns.dw
    begin: (?<!\.|\$)\b(input)\s+([[:alpha:]][[:alnum:]]*)\s+([^\n]*)(?!\$|\.)
    beginCaptures:
      '1': { name: storage.type.ns.dw }
      '2': { name: entity.name.ns.dw }
      '3': { name: meta.definition.ns.dw string.mime.dw }
    end: (?=\n)


  output-directive:
    name: meta.directive.ns.dw
    begin: (?<!\.|\$)\b(output)\s+([[:alpha:]][[:alnum:]]*)(?!\$|\.)
    beginCaptures:
      '1': { name: storage.type.ns.dw }
      '2': { name: meta.definition.ns.dw variable.other.ns.dw }
    end: (?=\n)

  statements:
    patterns:
    - {include: '#namespaces'}
    - {include: '#typedefs'}
    - {include: '#functions'}
    - {include: '#variables'}
    - {include: '#ns-directive'}
    - {include: '#input-directive'}
    - {include: '#output-directive'}
    - {include: '#expressions'}

  template-substitution-element:
    name: meta.template.expression.dw
    begin: \$\(
    beginCaptures:
      '0': { name: keyword.other.dw }
    end: \)
    endCaptures:
      '0': { name: keyword.other.dw }
    patterns:
      - include: '#expressions'

  strings:
    patterns:
    - begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.dw}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.dw}
      name: string.quoted.double.dw
      patterns:
      - include: '#template-substitution-element'
      - {match: \\., name: constant.character.escape.dw}
    - begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.dw}
      end: "'"
      endCaptures:
        '0': {name: punctuation.definition.string.end.dw}
      name: string.quoted.single.dw
      patterns:
      - include: '#template-substitution-element'
      - {match: \\., name: constant.character.escape.dw}
    - begin: '`'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.dw}
      end: '`'
      endCaptures:
        '0': {name: punctuation.definition.string.end.dw}
      name: string.quoted.single.dw
      patterns:
      - include: '#template-substitution-element'
      - {match: \\., name: constant.character.escape.dw}
  typedefs:
    begin: (?=\s*(?:type))
    end: (?=$)
    patterns:
    - {match: \b(type)\b, name: keyword.other.dw}
    - begin: <
      end: '>'
      patterns:
      - {include: '#generics'}
    - match: '='
      name: keyword.other.dw
    - {include: '#types'}
  types:
    patterns:
    - {match: \b(String|Boolean|Number|Range|Namespace|Uri|DateTime|LocalDateTime|Date|LocalTime|Time|TimeZone|Period|Binary|Null|Regex|Nothing|Any|Object|Key)\b,
      name: storage.type.buildin.dw}
    - begin: \b(Array|Type)<\b
      beginCaptures:
        '1': {name: storage.type.buildin.collection.dw}
      end: '>'
      patterns:
      - {include: '#types'}
    - match: \b([A-Z][a-zA-Z0-9_]*)
      name: storage.type.dw
    - begin: \w+<
      end: '>'
      patterns:
      - {include: '#types'}
      - {include: '#keywords'}
    - begin: \(
      beginCaptures:
        '1': {name: keyword.operator.tuple.dw}
      end: (\)\s*=>)
      patterns:
      - {include: '#parameters'}

    - begin: \{
      end: \}
      patterns:
      - {include: '#statements'}
    - begin: \(
      end: \)
      patterns:
      - {include: '#types'}
    
    - {match: (&), name: keyword.operator.declaration.dw}
  variables:
    begin: (?=\s*(?:var))
    end: (?=:|=|$)
    patterns:
    - begin: \b(var)\b
      beginCaptures:
        '1': {name: keyword.other.dw}
      end: (?=:|=|$)
      patterns:
      - begin: <
        end: '>'
        patterns:
        - {include: '#generics'}
      - captures:
          '2': {name: entity.name.variable.dw}
        match: ([\.<\?>\w]+\.)?(\w+)
    - begin: (:)
      beginCaptures:
        '1': {name: keyword.operator.declaration.dw}
      end: (?==|$)
      patterns:
      - {include: '#types'}
      
    - begin: (=)
      beginCaptures:
        '1': {name: keyword.operator.assignment.dw}
      end: (?=$)
      patterns:
      - {include: '#expressions'}
      


  match-block:
    name: match-block.expr.dw
    begin: \{
    beginCaptures:
      '0': { name: keyword.control.switch.dw }
    end: (?=\})
    patterns:
    - include: '#case-clause'
    - include: '#expressions'

  case-clause:
    name: case-clause.expr.dw
    begin: (?<!\.|\$)\b(case|else(?=\s*->))\b(?!\$|\.)
    beginCaptures:
      '1': { name: keyword.control.switch.dw }
    end: \-\>
    endCaptures:
      '0': { name: keyword.control.switch.dw }
    patterns:
    - begin: (?<!\.|\$)\b(is)\s+
      beginCaptures:
        '1': { name: keyword.control.as.dw }
      end: (?=\-\>)
      patterns:
      - include: '#types'
    - include: '#expressions'

  match-statement:
    name: match-statement.expr.dw
    begin: (?<!\.|\$)\b(match\s*)(?=\{)
    beginCaptures:
      '0': {name: keyword.control.switch.dw }
    end: \}
    endCaptures: 
      '0': {name: keyword.control.switch.dw }      
      '1': {name: punctuation.definition.block.dw}      
    patterns:
    - include: '#match-block'


  object-literal:
    name: meta.objectliteral.dw
    begin: \{
    beginCaptures:
      '0': { name: punctuation.definition.block.dw }
    end: \}
    endCaptures:
      '0': { name: punctuation.definition.block.dw }
    patterns:
    - include: '#object-member'

  object-member:
    patterns:
    - include: '#comment'
    - include: '#paren-expression'
    - name: meta.object.member.dw meta.object-literal.key.dw
      begin: (?=[\'\"])
      end: (?=:)
      patterns:
      - include: '#strings'

    - name: meta.object.member.dw
      match: \b([[:alpha:]][[:alnum:]]+#)
      captures:
        '0': { name: entity.name.ns.dw }

    - name: meta.object.member.dw
      match: (?![_$[:alpha:]])([[:digit:]]+)\s*(?=:)
      captures:
        '0': { name: meta.object-literal.key.dw }
        '1': { name: constant.numeric.decimal.dw }

    - name: meta.object.member.dw
      match: (?:[_$[:alpha:]][_$[:alnum:]]*)\s*(?=:)
      captures:
        '0': { name: meta.object-literal.key.dw }
      end: (?=,|\})
    - include: '#object-member-body'
    - include: '#punctuation-comma'

  object-member-body:
    name:  meta.object.member.dw
    begin: ':'
    beginCaptures:
      '0': { name: meta.object-literal.key.dw punctuation.separator.key-value.dw }
    end: (?=,|\})
    patterns:
    - include: '#expressions'

