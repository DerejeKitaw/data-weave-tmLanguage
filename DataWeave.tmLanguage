<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>dwl</string>
	</array>
	<key>name</key>
	<string>DataWeave</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#statements</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.dw</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\A(#!).*(?=$)</string>
			<key>name</key>
			<string>comment.line.shebang.dw</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access-modifier</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(abstract|public|protected|private|readonly|static)\b(?!\$|\.)</string>
			<key>name</key>
			<string>storage.modifier.dw</string>
		</dict>
		<key>after-operator-block</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[=(,\[?+!]|await|return|yield|throw|in|of|typeof|&amp;&amp;|\|\||\*)\s*(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.objectliteral.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
			</array>
		</dict>
		<key>array-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?:(~)\s*)?(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.dw</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#binding-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>array-literal</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.array.literal.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>arrow-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x) ((?&lt;![})!\]])\s*
  (?=
    # sure shot arrow functions even if =&gt; is on new line
    (
      [(]\s*
      (
        ([)]\s*:) |                                   # ():
        ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:) # [(]param: | [(]...param:
      )
    ) |
    (
      [&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*\s+extends\s*[^\-&gt;] # &lt; typeparam extends 
    ) |
    # arrow function possible to detect only with =&gt; on same line
    (
      (&lt;([^&lt;&gt;=]|=[^&lt;]|\&lt;([^=&lt;&gt;]|=[^&lt;])+\&gt;)+&gt;\s*)?                 # typeparameters
      \(([^()]|\([^()]*\))*\)                     # parameteres
      (\s*:\s*(.)*)?                              # return type
      \s*\-&gt;                                      # arrow operator
    )
  )
)</string>
					<key>end</key>
					<string>(?=(}|---|-&gt;)|\bvar\b|\binput\b|\boutput\b|\btype\b|\bfun\b|\bns\b|\bimport\b)</string>
					<key>name</key>
					<string>meta.arrow.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#arrow-return-type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>-&gt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\}|\S)(?&lt;!=&gt;)|((?!\{)(?=\S))</string>
					<key>name</key>
					<string>meta.arrow.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#decl-block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>arrow-return-type</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\))\s*(:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.type.annotation.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(}|---|-&gt;)|\bvar\b|\binput\b|\boutput\b|\btype\b|\bfun\b|\bns\b|\bimport\b)</string>
			<key>name</key>
			<string>meta.return.type.arrow.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=[:])(?=\s*\{)</string>
					<key>end</key>
					<string>(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-predicate-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
			</array>
		</dict>
		<key>body</key>
		<dict>
			<key>begin</key>
			<string>(\-\-\-)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.template.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?:"\\END OF FILE")</string>
			<key>name</key>
			<string>meta.body.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>boolean-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\btrue\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.boolean.true.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bfalse\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.boolean.false.dw</string>
				</dict>
			</array>
		</dict>
		<key>brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}|(?=\*/)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#brackets</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>end</key>
					<string>\]|(?=\*/)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#brackets</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>case-clause</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(case|else(?=\s*-&gt;))\b(?!\$|\.)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\-\&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>case-clause.expr.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\b(is)\s+</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\-\&gt;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.dw</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.documentation.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#docblock</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(/\*)(?:\s*((@)internal)(?=\s|(\*/)))?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.internaldeclaration.dw</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.decorator.internaldeclaration.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.dw</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.dw</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>comment.line.double-slash.dw</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.dw</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.internaldeclaration.dw</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.decorator.internaldeclaration.dw</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>comment.line.double-slash.dw</string>
					<key>end</key>
					<string>(?=^)</string>
				</dict>
			</array>
		</dict>
		<key>control-statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(else|if)\b(?!\$|\.)</string>
					<key>name</key>
					<string>keyword.control.conditional.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(using)\b(?!\$|\.)</string>
					<key>name</key>
					<string>keyword.control.with.dw</string>
				</dict>
			</array>
		</dict>
		<key>decl-block</key>
		<dict>
			<key>begin</key>
			<string>\=</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(}|---)|\bvar\b|\binput\b|\boutput\b|\btype\b|\bfun\b|\bns\b|\bimport\b)</string>
			<key>name</key>
			<string>meta.block.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#dw-directive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ns-directive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#input-directive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#output-directive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-declaration</string>
				</dict>
			</array>
		</dict>
		<key>decorator</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\@</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.decorator.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\s)</string>
			<key>name</key>
			<string>meta.decorator.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>destructuring-parameter</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.object.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.object.dw</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parameter.object-binding-pattern.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parameter-object-binding-element</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:)\s*(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.array.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.array.dw</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.paramter.array-binding-pattern.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parameter-binding-element</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#punctuation-comma</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>destructuring-parameter-rest</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.dw</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>
		</dict>
		<key>docblock</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.language.access-type.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
((@)(?:access|api))
\s+
(private|protected|public)
\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bracket.angle.begin.jsdoc</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>constant.other.email.link.underline.jsdoc</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bracket.angle.end.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
((@)author)
\s+
(
  [^@\s&lt;&gt;*/]
  (?:[^@&lt;&gt;*/]|\*[^/])*
)
(?:
  \s*
  (&lt;)
  ([^&gt;\s]+)
  (&gt;)
)?</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.control.jsdoc</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
((@)borrows) \s+
((?:[^@\s*/]|\*[^/])+)    # &lt;that namepath&gt;
\s+ (as) \s+              # as
((?:[^@\s*/]|\*[^/])+)    # &lt;this namepath&gt;</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>((@)example)\s+</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=@|\*/)</string>
					<key>name</key>
					<string>meta.example.jsdoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>^\s\*\s+</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\G(&lt;)caption(&gt;)</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>entity.name.tag.inline.jsdoc</string>
								</dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.bracket.angle.begin.jsdoc</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.bracket.angle.end.jsdoc</string>
								</dict>
							</dict>
							<key>contentName</key>
							<string>constant.other.description.jsdoc</string>
							<key>end</key>
							<string>(&lt;/)caption(&gt;)|(?=\*/)</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>entity.name.tag.inline.jsdoc</string>
								</dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.bracket.angle.begin.jsdoc</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.bracket.angle.end.jsdoc</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>source.embedded.dw</string>
								</dict>
							</dict>
							<key>match</key>
							<string>[^\s@*](?:[^*]|\*[^/])*</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.language.symbol-type.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) ((@)kind) \s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.link.underline.jsdoc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
((@)see)
\s+
(?:
  # URL
  (
    (?!
      # Avoid matching bare URIs (also acceptable as links)
      https?://
      |
      # Avoid matching {@inline tags}; we match those below
      (?:\[[^\[\]]*\])? # Possible description [preceding]{@tag}
      {@(?:link|linkcode|linkplain|tutorial)\b
    )
    # Matched namepath
    (?:[^\s*]|\*[^/])+
  )
  |
  # JSDoc namepath
  (
    (?!https?://)
    (?:[^@\s*/]|\*[^/])+
  )
)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.delimiter.object.comma.jsdoc</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
((@)template)
\s+
# One or more valid identifiers
(?:
  ([A-Za-z_$]        # First character: non-numeric word character
  [\w$.\[\]]*)       # Rest of identifier
  (?:                # Possible list of additional identifiers
    \s* (,) \s*
    ([A-Za-z_$]
    [\w$.\[\]]*)
  )*
)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
(
  (@)
  (?:arg|argument|const|constant|member|namespace|param|var)
)
\s+
(
  [A-Za-z_$]
  [\w$.\[\]]*
)</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>((@)typedef)\s+(?={)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s|\*/|[^{}\[\]A-Za-z_$])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsdoctype</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:[^@\s*/]|\*[^/])+</string>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\s+(?={)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s|\*/|[^{}\[\]A-Za-z_$])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsdoctype</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([A-Za-z_$][\w$.\[\]]*)</string>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\[</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.optional-value.begin.bracket.square.jsdoc</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.assignment.jsdoc</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>source.embedded.dw</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.optional-value.end.bracket.square.jsdoc</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>invalid.illegal.syntax.jsdoc</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\]|(?=\*/)</string>
							<key>match</key>
							<string>(?x)
(\[)\s*
[\w$]+
(?:
  (?:\[\])?                                        # Foo[ ].bar properties within an array
  \.                                                # Foo.Bar namespaced parameter
  [\w$]+
)*
(?:
  \s*
  (=)                                                # [foo=bar] Default parameter value
  \s*
  (
    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes
    (?:
      "(?:(?:\*(?!/))|(?:\\(?!"))|[^*\\])*?" |  # [foo="bar"] Double-quoted
      '(?:(?:\*(?!/))|(?:\\(?!'))|[^*\\])*?' |  # [foo='bar'] Single-quoted
      \[ (?:(?:\*(?!/))|[^*])*? \] |              # [foo=[1,2]] Array literal
      (?:(?:\*(?!/))|[^*])*?                        # Everything else
    )*
  )
)?
\s*(?:(\])((?:[^*\s]|\*[^\s/])+)?|(?=\*/))</string>
							<key>name</key>
							<string>variable.other.jsdoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.assignment.jsdoc</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>source.embedded.dw</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(=)((?:[^\]*]|\*[^/])*)</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#brackets</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#quotes</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>((@)(?:define|enum|exception|implements|modifies|namespace|private|protected|returns?|suppress|throws|type))\s+(?={)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s|\*/|[^{}\[\]A-Za-z_$])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsdoctype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
(
  (@)
  (?:alias|augments|callback|constructs|emits|event|fires|exports?
  |extends|external|function|func|host|lends|listens|interface|memberof!?
  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)
)
\s+
(
  (?:
    [^{}@\s*] | \*[^/]
  )+
)</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>((@)(?:default(?:value)?|license|version))\s+(([''"]))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.jsdoc</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>variable.other.jsdoc</string>
					<key>end</key>
					<string>(\3)|(?=$|\*/)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.jsdoc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((@)(?:default(?:value)?|license|tutorial|variation|version))\s+([^\s*]+)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tag.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|global|host|ignore|implements|implicitCast|inherit[Dd]oc|inner|instance|interface |internal|kind|lends|license|listens|main|member|memberof!?|method|mixes|mixins?|modifies|module |name|namespace|noalias|nocollapse|nocompile|nosideeffects|override|overview|package|param|preserve |private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static |struct|submodule|summary|suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted |uses|var|variation|version|virtual|writeOnce) \b</string>
					<key>name</key>
					<string>storage.type.class.jsdoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inline-tags</string>
				</dict>
			</array>
		</dict>
		<key>dw-directive</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(%dw)\s+([0-9]\.[0-9])(?!\$|\.)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>comment.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\n)</string>
			<key>name</key>
			<string>meta.directive.ns.dw</string>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#template</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#if-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arrow-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#match-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#identifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-accessor</string>
				</dict>
			</array>
		</dict>
		<key>expression-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bnot\b(?!\$|\.)</string>
					<key>name</key>
					<string>keyword.operator.expression.void.dw</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\b(as|is)\s+</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|^|[;,:})\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>~</string>
					<key>name</key>
					<string>keyword.operator.spread.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;&lt;|&gt;&gt;&gt;|&gt;&gt;</string>
					<key>name</key>
					<string>keyword.operator.bitwise.shift.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>==|!=</string>
					<key>name</key>
					<string>keyword.operator.comparison.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;=|&gt;=|&lt;|&gt;</string>
					<key>name</key>
					<string>keyword.operator.relational.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>and|or</string>
					<key>name</key>
					<string>keyword.operator.logical.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\&amp;|~|\^|\|</string>
					<key>name</key>
					<string>keyword.operator.bitwise.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\=</string>
					<key>name</key>
					<string>keyword.operator.assignment.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>--</string>
					<key>name</key>
					<string>keyword.operator.decrement.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+\+</string>
					<key>name</key>
					<string>keyword.operator.increment.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%|\*|/|-|\+</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.dw</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=[_$[:alnum:])])\s*(/)(?![/*])</string>
				</dict>
			</array>
		</dict>
		<key>field-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\()(?:(?&lt;!\.|\$)\b(readonly)\s+)?(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))))|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.field.declaration.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=((?:[_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))</string>
					<key>end</key>
					<string>(?=[};,=]|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))))|(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#array-literal</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[_$[:alpha:]][_$[:alnum:]]*</string>
							<key>name</key>
							<string>meta.definition.property.dw variable.object.property.dw</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\?</string>
							<key>name</key>
							<string>keyword.operator.optional.dw</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>for-loop</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(for)(?:\s+(await))?\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.loop.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.loop.dw</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dw</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>function-call</key>
		<dict>
			<key>begin</key>
			<string>(?=(([_$[:alpha:]][_$[:alnum:]]*\s*\.\s*)*|(\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\s*(&lt;([^&lt;&gt;=]|=[^&lt;]|\&lt;([^=&lt;&gt;]|=[^&lt;])+\&gt;)+&gt;\s*)?\()</string>
			<key>end</key>
			<string>(?&lt;=\))(?!(([_$[:alpha:]][_$[:alnum:]]*\s*\.\s*)*|(\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\s*(&lt;([^&lt;&gt;=]|=[^&lt;]|\&lt;([^=&lt;&gt;]|=[^&lt;])+\&gt;)+&gt;\s*)?\()</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=(([_$[:alpha:]][_$[:alnum:]]*\s*\.\s*)*|(\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*))</string>
					<key>end</key>
					<string>(?=\s*(&lt;([^&lt;&gt;=]|=[^&lt;]|\&lt;([^=&lt;&gt;]|=[^&lt;])+\&gt;)+&gt;\s*)?\()</string>
					<key>name</key>
					<string>meta.function-call.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#literal</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#object-identifiers</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#punctuation-accessor</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?![\.\$])\bimport(?=\s*[\(]\s*[\"\'\`])</string>
							<key>name</key>
							<string>keyword.operator.expression.import.dw</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
							<key>name</key>
							<string>entity.name.function.dw</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\&lt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.typeparameters.begin.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.typeparameters.end.dw</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type.parameters.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#punctuation-comma</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(fun\b)(?:(?:\s+|(?&lt;=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.definition.function.dw entity.name.function.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(}|---)|\bvar\b|\binput\b|\boutput\b|\btype\b|\bfun\b|\bns\b|\bimport\b)</string>
			<key>name</key>
			<string>meta.function.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>function-parameters</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameters.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-parameter</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.parameter.dw</string>
				</dict>
			</array>
		</dict>
		<key>identifiers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-identifiers</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?:(\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\s*=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
    ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
    ((&lt;([^&lt;&gt;=]|=[^&lt;]|\&lt;([^=&lt;&gt;]|=[^&lt;])+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;)
  ))
))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.property.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\.)\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\.)\s*([_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
					<key>name</key>
					<string>variable.other.constant.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
					<key>name</key>
					<string>variable.other.readwrite.dw</string>
				</dict>
			</array>
		</dict>
		<key>if-expression</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?=\bif\s*\()</string>
			<key>end</key>
			<string>\n</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>if-statement.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#if-part-expression</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(else)\s*</string>
					<key>name</key>
					<string>keyword.control.else.ts</string>
				</dict>
			</array>
		</dict>
		<key>if-part-expression</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(if)\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.if.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>switch-expression.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>import-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(import)(?!(\s*:)|(\$|\.))\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=;|$)</string>
			<key>name</key>
			<string>meta.import.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#import-export-declaration</string>
				</dict>
			</array>
		</dict>
		<key>import-export-clause</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.default.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.language.import-export-all.dw</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.dw</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.dw</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.dw</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.alias.dw</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>(default|*|name) as alias</string>
					<key>match</key>
					<string>(?x) (?: \b(default)\b | (\*) | ([_$[:alpha:]][_$[:alnum:]]*)) \s+ 
  (as) \s+ (?: (\b default \b | \*) | ([_$[:alpha:]][_$[:alnum:]]*))</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*</string>
					<key>name</key>
					<string>constant.language.import-export-all.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(default)\b</string>
					<key>name</key>
					<string>keyword.control.default.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>variable.other.readwrite.alias.dw</string>
				</dict>
			</array>
		</dict>
		<key>import-export-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfrom\b</string>
					<key>name</key>
					<string>keyword.control.from.dw</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-export-clause</string>
				</dict>
			</array>
		</dict>
		<key>indexer-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?:(?&lt;!\.|\$)\b(readonly)\s*)?(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s*(?=:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dw</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])\s*(\?\s*)?|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.indexer.declaration.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
			</array>
		</dict>
		<key>indexer-mapped-type-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?:(?&lt;!\.|\$)\b(readonly)\s*)?(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s+(in)\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dw</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.dw</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.expression.in.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])\s*(\?\s*)?|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.indexer.mappedtype.declaration.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>inline-tags</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bracket.square.begin.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bracket.square.end.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\[)[^\]]+(\])(?={@(?:link|linkcode|linkplain|tutorial))</string>
					<key>name</key>
					<string>constant.other.description.jsdoc</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>({)((@)(?:link(?:code|plain)?|tutorial))\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bracket.curly.begin.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.inline.tag.jsdoc</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}|(?=\*/)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bracket.curly.end.jsdoc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>entity.name.type.instance.jsdoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.link.underline.jsdoc</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.pipe.jsdoc</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\G((?=https?://)(?:[^|}\s*]|\*[/])+)(\|)?</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.description.jsdoc</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.pipe.jsdoc</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\G((?:[^{}@\s|*]|\*[^/])+)(\|)?</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>input-directive</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(input)\s+([[:alpha:]][[:alnum:]]*)\s+([^\n]*)(?!\$|\.)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.ns.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.ns.dw</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.definition.ns.dw string.mime.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\n)</string>
			<key>name</key>
			<string>meta.directive.ns.dw</string>
		</dict>
		<key>jsdoctype</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\G{(?:[^}*]|\*[^/}])+$</string>
					<key>name</key>
					<string>invalid.illegal.type.jsdoc</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G({)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bracket.curly.begin.jsdoc</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>entity.name.type.instance.jsdoc</string>
					<key>end</key>
					<string>((}))\s*|(?=\*/)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bracket.curly.end.jsdoc</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#brackets</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#boolean-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#null-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numericConstant-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
			</array>
		</dict>
		<key>match-block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\})</string>
			<key>name</key>
			<string>match-block.expr.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#case-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>match-expression</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(match)\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.match.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>match-expression.expr.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>match-statement</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(match\s*)(?=\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.dw</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>match-statement.expr.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#match-block</string>
				</dict>
			</array>
		</dict>
		<key>method-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?(?:\b(get|set)\s+)(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*[\(\&lt;])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.dw</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.async.dw</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.property.dw</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\}|;|,|$)|(?&lt;=\})</string>
					<key>name</key>
					<string>meta.method.declaration.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#method-declaration-name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#return-type</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#decl-block</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?(?:(?:\b(?:(new)|(constructor))\b(?!\$|\.|:))|(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))?\s*[\(\&lt;]))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.dw</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.async.dw</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.new.dw</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.dw</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\}|;|,|$)|(?&lt;=\})</string>
					<key>name</key>
					<string>meta.method.declaration.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#method-declaration-name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#return-type</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#decl-block</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>method-declaration-name</key>
		<dict>
			<key>begin</key>
			<string>(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??)\s*[\(\&lt;])</string>
			<key>end</key>
			<string>(?=\(|\&lt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
					<key>name</key>
					<string>meta.definition.method.dw entity.name.function.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\?</string>
					<key>name</key>
					<string>keyword.operator.optional.dw</string>
				</dict>
			</array>
		</dict>
		<key>ns-directive</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(ns)\s+([[:alpha:]][[:alnum:]]*)\s+([^\n]*)(?!\$|\.)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.ns.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.ns.dw</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.definition.ns.dw string.url.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\n)</string>
			<key>name</key>
			<string>meta.directive.ns.dw</string>
		</dict>
		<key>null-literal</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bnull\b(?!\$)</string>
			<key>name</key>
			<string>constant.language.null.dw</string>
		</dict>
		<key>numeric-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(x|X)[0-9a-fA-F]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.hex.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(b|B)[01]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.binary.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(o|O)?[0-7]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.octal.dw</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.decimal.dw</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.dw</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.dw</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.dw</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.dw</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
(?&lt;!\$)(?:
  (?:\b[0-9]+(\.)[0-9]+[eE][+-]?[0-9]+\b)| # 1.1E+3
  (?:\b[0-9]+(\.)[eE][+-]?[0-9]+\b)|       # 1.E+3
  (?:\B(\.)[0-9]+[eE][+-]?[0-9]+\b)|       # .1E+3
  (?:\b[0-9]+[eE][+-]?[0-9]+\b)|            # 1E+3
  (?:\b[0-9]+(\.)[0-9]+\b)|                # 1.1
  (?:\b[0-9]+(\.)\B)|                      # 1.
  (?:\B(\.)[0-9]+\b)|                      # .1
  (?:\b[0-9]+\b(?!\.))                     # 1
)(?!\$)</string>
				</dict>
			</array>
		</dict>
		<key>numericConstant-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bNaN\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.nan.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bInfinity\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.infinity.dw</string>
				</dict>
			</array>
		</dict>
		<key>object-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-binding-element-propertyName</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#binding-element</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>object-binding-element-propertyName</key>
		<dict>
			<key>begin</key>
			<string>(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
			<key>end</key>
			<string>(:)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.destructuring.dw</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>variable.object.property.dw</string>
				</dict>
			</array>
		</dict>
		<key>object-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?:(~)\s*)?(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.dw</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-binding-element</string>
				</dict>
			</array>
		</dict>
		<key>object-identifiers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)(?=\s*\.\s*prototype\b(?!\$))</string>
					<key>name</key>
					<string>support.class.dw</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.object.property.dw</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.property.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(\.)\s*(?:
  ([[:upper:]][_$[:digit:][:upper:]]*) |
  ([_$[:alpha:]][_$[:alnum:]]*)
)(?=\s*\.\s*[_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.object.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?:
  ([[:upper:]][_$[:digit:][:upper:]]*) |
  ([_$[:alpha:]][_$[:alnum:]]*)
)(?=\s*\.\s*[_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
			</array>
		</dict>
		<key>object-literal</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.objectliteral.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
			</array>
		</dict>
		<key>object-literal-method-overload-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*[\(\&lt;])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.dw</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.generator.asterisk.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\(|\&lt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method-declaration-name</string>
				</dict>
			</array>
		</dict>
		<key>object-member</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[\'\"])</string>
					<key>end</key>
					<string>(?=:)</string>
					<key>name</key>
					<string>meta.object.member.dw meta.object-literal.key.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>entity.name.ns.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b([[:alpha:]][[:alnum:]]+#)</string>
					<key>name</key>
					<string>meta.object.member.dw</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.object-literal.key.dw</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.decimal.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?![_$[:alpha:]])([[:digit:]]+)\s*(?=:)</string>
					<key>name</key>
					<string>meta.object.member.dw</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.object-literal.key.dw</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\s*(?=:\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
    ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
    ((&lt;([^&lt;&gt;=]|=[^&lt;]|\&lt;([^=&lt;&gt;]|=[^&lt;])+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;)
  ))
)))</string>
					<key>name</key>
					<string>meta.object.member.dw</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.object-literal.key.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>match</key>
					<string>(?:[_$[:alpha:]][_$[:alnum:]]*)\s*(?=:)</string>
					<key>name</key>
					<string>meta.object.member.dw</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-member-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>object-member-body</key>
		<dict>
			<key>begin</key>
			<string>:</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.object-literal.key.dw punctuation.separator.key-value.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=,|\})</string>
			<key>name</key>
			<string>meta.object.member.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>output-directive</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(output)\s+([[:alpha:]][[:alnum:]]*)(?!\$|\.)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.ns.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.definition.ns.dw variable.other.ns.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\n)</string>
			<key>name</key>
			<string>meta.directive.ns.dw</string>
		</dict>
		<key>parameter-array-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?:(\.\.\.)\s*)?(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.dw</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-binding-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>parameter-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-array-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-parameter-rest</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
			</array>
		</dict>
		<key>parameter-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\s*\b(public|protected|private|readonly)(?=\s+(public|protected|private|readonly)\s+)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.rest.dw</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.dw variable.language.this.dw</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.dw</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.optional.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?:\s*\b(public|private|protected|readonly)\s+)?(\.\.\.)?\s*(?&lt;!=|:)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\s*(\??)(?=\s*
  (=\s*(
    ((async\s+)?(
      (function\s*[(&lt;*]) |
      (function\s+) |
      ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
    )) |
    ((async\s*)?(
      ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
      ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
      ((&lt;([^&lt;&gt;=]|=[^&lt;]|\&lt;([^=&lt;&gt;]|=[^&lt;])+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;)
    ))
  )) |
  (:\s*(
    (&lt;) |
    ([(]\s*(
      ([)]) |
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    ))
  ))
)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.rest.dw</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.dw variable.language.this.dw</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.dw</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.optional.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:\s*\b(public|private|protected|readonly)\s+)?(\.\.\.)?\s*(?&lt;!=|:)(?:((?&lt;!\.|\$)\bthis\b(?!\.|\$))|([_$[:alpha:]][_$[:alnum:]]*))\s*(\??)</string>
				</dict>
			</array>
		</dict>
		<key>parameter-object-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\\'|\\)*\')|(\"([^\"\\]|\\\"|\\)*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-binding-element-propertyName</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#parameter-binding-element</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-parameter-rest</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>parameter-object-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?:(\.\.\.)\s*)?(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.dw</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-object-binding-element</string>
				</dict>
			</array>
		</dict>
		<key>paren-expression</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dw</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>punctuation-accessor</key>
		<dict>
			<key>match</key>
			<string>(\.\.\*|\.\.|\.\*|\.|::)</string>
			<key>name</key>
			<string>punctuation.accessor.dw</string>
		</dict>
		<key>punctuation-comma</key>
		<dict>
			<key>match</key>
			<string>,</string>
			<key>name</key>
			<string>punctuation.separator.comma.dw</string>
		</dict>
		<key>qstring-double</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#template-substitution-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>qstring-single</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\')|((?:[^\\\n])$)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#template-substitution-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>quotes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>end</key>
					<string>'|(?=\*/)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#quotes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"|(?=\*/)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#quotes</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>regex</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=[=(:,\[?+!]|---|case|-&gt;|&amp;&amp;|\|\||\*\/)\s*(\/)(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)+\])+\/(?![\/*])(?!\s*[a-zA-Z0-9_$]))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(/)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.dw</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;![_$[:alnum:])])\/(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)+\])+\/(?![\/*])(?!\s*[a-zA-Z0-9_$]))</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(/)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.dw</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>regex-character-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[wWsSdDtrnvf]|\.</string>
					<key>name</key>
					<string>constant.other.character-class.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\([0-7]{3}|x\h\h|u\h\h\h\h)</string>
					<key>name</key>
					<string>constant.character.numeric.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\c[A-Z]</string>
					<key>name</key>
					<string>constant.character.control.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.backslash.regexp</string>
				</dict>
			</array>
		</dict>
		<key>regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[bB]|\^|\$</string>
					<key>name</key>
					<string>keyword.control.anchor.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\[1-9]\d*</string>
					<key>name</key>
					<string>keyword.other.back-reference.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??</string>
					<key>name</key>
					<string>keyword.operator.quantifier.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|</string>
					<key>name</key>
					<string>keyword.operator.or.regexp</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()((\?=)|(\?!))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.assertion.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.look-ahead.regexp</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.negative-look-ahead.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.assertion.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\((\?:)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.capture.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)(\^)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.negation.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.character-class.set.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>constant.character.numeric.regexp</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.character.control.regexp</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>constant.character.numeric.regexp</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>constant.character.control.regexp</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?:.|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))</string>
							<key>name</key>
							<string>constant.other.character-class.range.regexp</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regex-character-class</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex-character-class</string>
				</dict>
			</array>
		</dict>
		<key>return-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\))\s*(:)(?=\s*\S)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.annotation.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;![:|&amp;])(?=$|^|[{};,]|//)</string>
					<key>name</key>
					<string>meta.return.type.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#return-type-core</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\))\s*(:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.annotation.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;![:|&amp;])((?=[{};,]|//|^\s*$)|((?&lt;=\S)(?=\s*$)))</string>
					<key>name</key>
					<string>meta.return.type.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#return-type-core</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>return-type-core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=[:|&amp;])(?=\s*\{)</string>
					<key>end</key>
					<string>(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-predicate-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>statements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#qstring-single</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#qstring-double</string>
				</dict>
			</array>
		</dict>
		<key>string-character-escape</key>
		<dict>
			<key>match</key>
			<string>\\(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>
			<key>name</key>
			<string>constant.character.escape.dw</string>
		</dict>
		<key>template</key>
		<dict>
			<key>begin</key>
			<string>([_$[:alpha:]][_$[:alnum:]]*)?(`)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.tagged-template.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.template.begin.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>`</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.template.end.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.template.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#template-substitution-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>template-substitution-element</key>
		<dict>
			<key>begin</key>
			<string>\$\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.template.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.template.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.template.expression.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-primitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-builtin-literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-tuple</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-object</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-fn-type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-paren-or-function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-function-return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-name</string>
				</dict>
			</array>
		</dict>
		<key>type-annotation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(:)(?=\s*\S)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.annotation.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;![:|&amp;])((?=$|^|[,);\}\]]|//)|(?==[^&gt;])|((?&lt;=[\}&gt;\]\)]|[_$[:alpha:]])\s*(?=\{)))</string>
					<key>name</key>
					<string>meta.type.annotation.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.annotation.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;![:|&amp;])((?=[,);\}\]]|//)|(?==[^&gt;])|(?=^\s*$)|((?&lt;=\S)(?=\s*$))|((?&lt;=[\}&gt;\]\)]|[_$[:alpha:]])\s*(?=\{)))</string>
					<key>name</key>
					<string>meta.type.annotation.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-builtin-literals</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(this|true|false|undefined|null|object)\b(?!\$|\.)</string>
			<key>name</key>
			<string>support.type.builtin.dw</string>
		</dict>
		<key>type-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(type)\b\s+([_$[:alpha:]][_$[:alnum:]]*)\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.type.dw</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.alias.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(}|---)|\bvar\b|\binput\b|\boutput\b|\btype\b|\bfun\b|\bns\b|\bimport\b)</string>
			<key>name</key>
			<string>meta.type.declaration.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(=)\s*</string>
				</dict>
			</array>
		</dict>
		<key>type-fn-type-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.new.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(new)\b(?=\s*\&lt;)</string>
					<key>name</key>
					<string>meta.type.constructor.dw</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\b(new)\b\s*(?=\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.new.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.type.constructor.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)(
  (?=
    [(]\s*(
      ([)]) | 
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    )
  )
)</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.type.function.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-function-return-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(=&gt;)(?=\s*\S)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;!=&gt;)(?&lt;![|&amp;])(?=[,\]\)\{\}=;&gt;]|//|$)</string>
					<key>name</key>
					<string>meta.type.function.return.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-function-return-type-core</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>=&gt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;!=&gt;)(?&lt;![|&amp;])((?=[,\]\)\{\}=;&gt;]|//|^\s*$)|((?&lt;=\S)(?=\s*$)))</string>
					<key>name</key>
					<string>meta.type.function.return.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-function-return-type-core</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-function-return-type-core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;==&gt;)(?=\s*\{)</string>
					<key>end</key>
					<string>(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-predicate-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.dw</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.dw</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
					<key>name</key>
					<string>entity.name.type.dw</string>
				</dict>
			</array>
		</dict>
		<key>type-object</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.type.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-mapped-type-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\.\.\.</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.spread.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\}|;|,|$)|(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#typeof-operator</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([&amp;|])(?=\s*\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[&amp;|]</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\S)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bkeyof\b(?!\$|\.)</string>
					<key>name</key>
					<string>keyword.operator.expression.keyof.dw</string>
				</dict>
			</array>
		</dict>
		<key>type-parameters</key>
		<dict>
			<key>begin</key>
			<string>(&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.typeparameters.begin.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.typeparameters.end.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.parameters.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)(&lt;:)(?!\$)</string>
					<key>name</key>
					<string>storage.modifier.dw</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\=(?!&gt;)</string>
					<key>name</key>
					<string>keyword.operator.assignment.dw</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>type-paren-or-function-parameters</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.paren.cover.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
			</array>
		</dict>
		<key>type-predicate-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bis\b(?!\$|\.)</string>
			<key>name</key>
			<string>keyword.operator.expression.is.dw</string>
		</dict>
		<key>type-primitive</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(string|number|boolean|symbol|any|void|never)\b(?!\$|\.)</string>
			<key>name</key>
			<string>support.type.primitive.dw</string>
		</dict>
		<key>type-tuple</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dw</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.tuple.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>typeof-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\btypeof\b(?!\$|\.)</string>
			<key>name</key>
			<string>keyword.operator.expression.typeof.dw</string>
		</dict>
		<key>var-expr</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(var)\b(?!\$|\.)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.dw</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(}|---)|\bvar\b|\binput\b|\boutput\b|\btype\b|\bfun\b|\bns\b|\bimport\b)</string>
			<key>name</key>
			<string>meta.var.expr.dw</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#var-single-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>var-single-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.definition.variable.dw variable.other.constant.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|^|[;,=}]|(\s+(of|in)\s+))</string>
					<key>name</key>
					<string>meta.var-single-variable.expr.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#var-single-variable-type-annotation</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.definition.variable.dw variable.other.readwrite.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|^|[;,=}]|(\s+(of|in)\s+))</string>
					<key>name</key>
					<string>meta.var-single-variable.expr.dw</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#var-single-variable-type-annotation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>var-single-variable-type-annotation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>variable-initializer</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|!)(=)(?!=)(?=\s*\S)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|^|[,);}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|!)(=)(?!=)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.dw</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[,);}\]])|(?=^\s*$)|(?&lt;=\S)(?&lt;!=)(?=\s*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.data-weave</string>
	<key>uuid</key>
	<string>ba6390ae-c50f-4dce-97f1-951dab8fc607</string>
</dict>
</plist>
